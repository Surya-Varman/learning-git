# ISL 22-02-23
# -*- coding: utf-8 -*-
"""torchhubconf.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1Ta5KZIEDQuV_iy58FKTffMZXD0eDYf-H
"""

import torch # core
from torch import nn # neural network submodule
from torch.utils.data import DataLoader # for preprocessing data
from torchvision import datasets #  datasets
from torchvision.transforms import ToTensor # image to numpy module

device = "cuda" if torch.cuda.is_available() else "cpu"

classes = [
    "T-shirt/top",
    "Trouser",
    "Pullover",
    "Dress",
    "Coat",
    "Sandal",
    "Shirt",
    "Sneaker",
    "Bag",
    "Ankle boot",
]

def load_data():
  training_data = datasets.FashionMNIST(
    root='data',
    train=True,
    download=True,
    transform=ToTensor(),
  )

  test_data = datasets.FashionMNIST(
    root='data',
    train=False,
    download=True,
    transform=ToTensor(),
  )

  return training_data, test_data

def create_dataloaders(training_data, test_data, batch_size=64):
  train_dataloader = DataLoader(training_data, batch_size=batch_size)
  test_dataloader = DataLoader(test_data, batch_size=batch_size)

  for X, y in test_dataloader:
    print(f'Shape of X[N, C, H, W: {X.shape}')
    print(f'Shape of y: {y.shape} {y.dtype}')
    break
  return train_dataloader, test_dataloader

# Neural Network
class NeuralNetwork(nn.Module):
  def __init__(self):
    super(NeuralNetwork, self).__init__()

    # flatten input to 1D tensor
    self.flatten = nn.Flatten()

    # creates stack of layers of neurons with ReLU activation.
    self.linear_relu_stack = nn.Sequential(
        nn.Linear(28*28, 512),
        nn.ReLU(),
        nn.Linear(512, 512),
        nn.ReLU(),
        nn.Linear(512, 20),
        nn.ReLU(),
        nn.Linear(20, 10) 
    )

  # "predicts"
  def forward(self, x):
      x = self.flatten(x)
      logits = self.linear_relu_stack(x)
      return logits

def get_lossfn_and_optimizer(model1):
    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model1.parameters(), lr=1e-3)
    return loss_fn, optimizer

def get_model():
  model = NeuralNetwork().to(device)
  return model

def _train(dataloader, model1, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model1.train()
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model1(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch % 100 == 0:
            loss, current = loss.item(), batch * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")

def _test(dataloader, model1, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)

    model1.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model1(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    
    test_loss /= num_batches
    correct /= size

    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

def train(train_dataloader, test_dataloader, model1, loss_fn, optimizer, epochs=5):
    for t in range(epochs):
        print(f"Epoch {t+1}\n-------------------------------")
        _train(train_dataloader, model1, loss_fn, optimizer)
        _test(test_dataloader, model1, loss_fn)
    print("Done!")
    return model1

def save_model(model1,mypath="model.pth"):
    torch.save(model1.state_dict(), "model.pth")
    print("Saved PyTorch Model State to model.pth")

def load_model(mypath="model.pth"):
    model = NeuralNetwork()
    model.load_state_dict(torch.load("model.pth"))
    return model

def sample_test(model1, test_data):
    model1.eval()
    x, y = test_data[0][0], test_data[0][1]
    with torch.no_grad():
        pred = model1(x)
        predicted, actual = classes[pred[0].argmax(0)], classes[y]
        print(f'Predicted: "{predicted}", Actual: "{actual}"')

# # Sample Model
# training_data, test_data = load_data()
# train_dataloader, test_dataloader = create_dataloaders(training_data=training_data, test_data=test_data)

# model = get_model()
# loss_fn, optimizer = get_lossfn_and_optimizer(model)

# train(train_dataloader=train_dataloader, test_dataloader=test_dataloader, model=model, loss_fn=loss_fn, optimizer=optimizer)
# save_model(model)
# model1 = load_model()
# sample_test(model1, test_data)